openapi: 3.0.0
info:
  title: LaMa Rest API
  description: MongoDB ExpressJS NodeJS LaMa Rest API
  version: 2.0.0
servers:
  - url: http://localhost:4001/api/
    description: Localhost development server
  - url: https://heroku-lama-api.herokuapp.com/api/
    description: Heroku remote server
components:
  securitySchemes:
    ApiKeyAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: authtoken

  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        fName:
          type: string
        lName:
          type: string
        email:
          type: string
        password:
          type: string
        date:
          type: string
        userId:
          type: string

    Tasks:
      type: object
      properties:
        archived:
          type: boolean
        isCollapsed:
          type: boolean
        date:
          type: string
        description:
          type: string
        urgency:
          type: string
        status:
          type: string
        projectId:
          type: string
        task:
          type: string
        userId:
          type: string

    Projects:
      type: object
      properties:
        name:
          type: string
        projectId:
          type: string
        userId:
          type: string
        collabIdOne:
          type: string
        collabIdTwo:
          type: string
        collabIdThree:
          type: string
        collabIdFour:
          type: string

paths:
  /user/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string

      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string

  /Projects:
    post:
      summary: Create a new Project object
      description: Create a new Project object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Projects"

      responses:
        201:
          description: Project created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"

  /Tasks:
    post:
      summary: Create a new Task object
      description: Create a new Task object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tasks"

      responses:
        201:
          description: Task created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"

  /Projects/collab/{collabId}:
    get:
      summary: Get all Projects based on Collab ID
      description: Retrieves a list of all projects with a Collab Id attached. IS CASE SENSATIIVE
      parameters:
        - in: path
          name: collabId
          required: true
          description: MongoDB Project Collab ID.
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific project Collab Id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Projects"

  /Projects/all/{collabId}:
    get:
      summary: Get All Projects by CollabID
      description: Retrieves a list of all projects either created by (equal to the collabId) or has the collabId.
      parameters:
        - in: path
          name: collabId
          required: true
          description: MongoDB Project Collab id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific project collab ID as collabId or userId.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Projects"

  /Projects/userId/{userId}:
    get:
      summary: Get All Projects by userID
      description: Retrieves a list of all projects that has been created by the userId.
      parameters:
        - in: path
          name: userId
          required: true
          description: MongoDB Project userId
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific project userId.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Projects"

  /Projects/{id}:
    get:
      summary: Get All Projects by userID
      description: Retrieves a list of all projects that has been created by the userId.
      parameters:
        - in: path
          name: userId
          required: true
          description: MongoDB Project userId
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific project userId.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Projects"
    
    put:
      summary: Updates a specific project object
      description: Updates a specific project object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
            
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Projects"
      responses:
        201:
          description: Project object updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"

    delete:
      summary: Deletes a specific Project object
      description: Deletes a specific Project object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        201:
          description: Project object deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"

  /Tasks/{userId}/{archived}/{projectId}:
    get:
      summary: Get All Tasks by userID for a specific project
      description: Retrieves a list of all Task where archived is false, for a specific project created by the user.
      parameters:
        - in: path
          name: userId
          required: true
          description: MongoDB Task userId
          schema:
            type: string

        - in: path
          name: archived
          required: true
          description: MongoDB Task archived boolean
          schema:
            type: boolean

        - in: path
          name: projectId
          required: true
          description: MongoDB Task projectId
          schema:
            type: string

      responses:
        200:
          description: All JSON objects with specific Task userId, projectId and archived false.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tasks"

  /Tasks/{userId}/{archived}:
    get:
      summary: Get All Tasks by userID
      description: Retrieves a list of all Task where archived is false.
      parameters:
        - in: path
          name: userId
          required: true
          description: MongoDB Task userId
          schema:
            type: string

        - in: path
          name: archived
          required: true
          description: MongoDB Task archived boolean
          schema:
            type: boolean

      responses:
        200:
          description: All JSON objects with specific Task userId and archived false.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tasks"

  /nextweek/today/{userId}/{archived}:
    get:
      summary: Get All Tasks for the current date by userID
      description: Retrieves a list of all Task for the current date by userID where archived is false.
      parameters:
        - in: path
          name: userId
          required: true
          description: MongoDB Task userId
          schema:
            type: string

        - in: path
          name: archived
          required: true
          description: MongoDB Task archived boolean
          schema:
            type: boolean

      responses:
        200:
          description: All JSON objects with Tasks for today by userId and archived false.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tasks"

  /nextweek/nextSeven/{userId}/{archived}:
    get:
      summary: Get All Tasks for the next seven days by userID
      description: Retrieves a list of all Tasks for the next seven days by userID where archived is false.
      parameters:
        - in: path
          name: userId
          required: true
          description: MongoDB Task userId
          schema:
            type: string

        - in: path
          name: archived
          required: true
          description: MongoDB Task archived boolean
          schema:
            type: boolean

      responses:
        200:
          description: All JSON objects with Tasks for next seven days by userId and archived false.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tasks"

  /Tasks/{id}:
    put:
      summary: Updates a specific Task object
      description: Updates a specific Task object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tasks"

      responses:
        201:
          description: Task object updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"

  /Projects/{id}:
    delete:
      summary: Deletes a specific Project object
      description: Deletes a specific Project object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        201:
          description: Project object deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"