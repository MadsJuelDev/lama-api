openapi: 3.0.0
info:
  title: MEN REST API
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:4001/api/
    description: Localhost development server
  # - url: https://smsj-men-restapi.herokuapp.com/api/
  #   description: Heroku remote server
components:
  securitySchemes:
    ApiKeyAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    hair:
      type: object
      properties:
        color:
          type: string
        style:
          type: string
        assetLocation:
          type: string

    bodyTop:
      type: object
      properties:
        color:
          type: string
        style:
          type: string
        assetLocation:
          type: string

    bodyBottom:
      type: object
      properties:
        color:
          type: string
        style:
          type: string
        assetLocation:
          type: string

    shoe:
      type: object
      properties:
        color:
          type: string
        style:
          type: string
        assetLocation:
          type: string

paths:
  /user/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string

      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string

  /hair:
    get:
      summary: Retrieves a list of all added hair
      description: Retrieves a list of hair objects as JSON objects.
      responses:
        200:
          description: A list of hair JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/hair"

    post:
      summary: Create a new hair object
      description: Create a new hair object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/hair"

      responses:
        201:
          description: hair created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/hair"

  /hair/{id}:
    get:
      summary: Specific hair object
      description: Retrieves a specific hair object based on its id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A hair object in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/hair"

    put:
      summary: Updates a specific hair object
      description: Updates a specific hair object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/hair"

      responses:
        201:
          description: hair object updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/hair"

    delete:
      summary: Deletes a specific hair object
      description: Deletes a specific hair object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        201:
          description: hair object deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/hair"

  /hair/color/{color}:
    get:
      summary: Get all specific hair Color
      description: Retrieves a list of all with a specific hair color. IS CASE SENSATIIVE
      parameters:
        - in: path
          name: color
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific hair color.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/hair"

  /hair/style/{style}:
    get:
      summary: Get all specific hair Style
      description: Retrieves a list of all with a specific hair style.
      parameters:
        - in: path
          name: style
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific hair style.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/hair"

  /bodyTop:
    get:
      summary: Retrieves a list of all added bodyTop
      description: Retrieves a list of bodyTop objects as JSON objects.
      responses:
        200:
          description: A list of bodyTop JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bodyTop"

    post:
      summary: Create a new bodyTop object
      description: Create a new bodyTop object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bodyTop"

      responses:
        201:
          description: bodyTop created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bodyTop"

  /bodyTop/{id}:
    get:
      summary: Specific bodyTop object
      description: Retrieves a specific bodyTop object based on its id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A bodyTop object in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bodyTop"

    put:
      summary: Updates a specific bodyTop object
      description: Updates a specific bodyTop object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bodyTop"

      responses:
        201:
          description: bodyTop object updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bodyTop"

    delete:
      summary: Deletes a specific bodyTop object
      description: Deletes a specific bodyTop object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        201:
          description: bodyTop object deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bodyTop"

  /bodyTop/color/{color}:
    get:
      summary: Get all specific bodyTop Color
      description: Retrieves a list of all with a specific bodyTop color. IS CASE SENSATIIVE
      parameters:
        - in: path
          name: color
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific bodyTop color.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bodyTop"

  /bodyTop/style/{style}:
    get:
      summary: Get all specific bodyTop Style
      description: Retrieves a list of all with a specific bodyTop style.
      parameters:
        - in: path
          name: style
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific bodyTop style.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bodyTop"

  /bodyBottom:
    get:
      summary: Retrieves a list of all added bodyBottom
      description: Retrieves a list of bodyBottom objects as JSON objects.
      responses:
        200:
          description: A list of bodyBottom JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bodyBottom"

    post:
      summary: Create a new bodyBottom object
      description: Create a new bodyBottom object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bodyBottom"

      responses:
        201:
          description: bodyBottom created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bodyBottom"

  /bodyBottom/{id}:
    get:
      summary: Specific bodyBottom object
      description: Retrieves a specific bodyBottom object based on its id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A bodyBottom object in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bodyBottom"

    put:
      summary: Updates a specific bodyBottom object
      description: Updates a specific bodyBottom object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bodyBottom"

      responses:
        201:
          description: bodyBottom object updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bodyBottom"

    delete:
      summary: Deletes a specific bodyBottom object
      description: Deletes a specific bodyBottom object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        201:
          description: bodyBottom object deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bodyBottom"

  /bodyBottom/color/{color}:
    get:
      summary: Get all specific bodyBottom Color
      description: Retrieves a list of all with a specific bodyBottom color. IS CASE SENSATIIVE
      parameters:
        - in: path
          name: color
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific bodyBottom color.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bodyBottom"

  /bodyBottom/style/{style}:
    get:
      summary: Get all specific bodyBottom Style
      description: Retrieves a list of all with a specific bodyBottom style.
      parameters:
        - in: path
          name: style
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific bodyBottom style.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bodyBottom"

  /shoe:
    get:
      summary: Retrieves a list of all added shoes
      description: Retrieves a list of shoe objects as JSON objects.
      responses:
        200:
          description: A list of shoe JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shoe"

    post:
      summary: Create a new shoe object
      description: Create a new shoe object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/shoe"

      responses:
        201:
          description: shoe created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shoe"

  /shoe/{id}:
    get:
      summary: Specific shoe object
      description: Retrieves a specific shoe object based on its id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A shoe object in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shoe"

    put:
      summary: Updates a specific shoe object
      description: Updates a specific shoe object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/shoe"

      responses:
        201:
          description: shoe object updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shoe"

    delete:
      summary: Deletes a specific shoe object
      description: Deletes a specific shoe object based on its id
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        201:
          description: shoe object deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/shoe"

  /shoe/color/{color}:
    get:
      summary: Get all specific shoe Color
      description: Retrieves a list of all with a specific shoe color. IS CASE SENSATIIVE
      parameters:
        - in: path
          name: color
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific shoe color.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shoe"

  /shoe/style/{style}:
    get:
      summary: Get all specific shoe Style
      description: Retrieves a list of all with a specific shoe style.
      parameters:
        - in: path
          name: style
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: All JSON object with specific shoe style.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shoe"
